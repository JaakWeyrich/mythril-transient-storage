Execution 1:
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 479
Estimated Gas Usage: 1114 - 1589
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0xc00000000008b4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 533
Estimated Gas Usage: 2917 - 38241
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1f8000000eae79, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 664
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8000000faef9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 680
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8000000faef9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 746
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8000000faef9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0



real	0m12.496s
user	0m11.703s
sys	0m0.625s
------------------------
Execution 2:
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 479
Estimated Gas Usage: 1114 - 1589
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x400001000021b4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 533
Estimated Gas Usage: 2917 - 38241
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x218f8000000fae79, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 664
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8800000f2edd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 680
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8800000f2edd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 746
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8800000f2edd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0



real	0m13.083s
user	0m12.269s
sys	0m0.643s
------------------------
Execution 3:
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 479
Estimated Gas Usage: 1114 - 1589
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000420ee9f4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 533
Estimated Gas Usage: 2917 - 38241
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x18f8801000caef9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 664
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x9f8000000eaffd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 680
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x9f8000000eaffd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 746
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x9f8000000eaffd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0



real	0m13.051s
user	0m12.131s
sys	0m0.707s
------------------------
Execution 4:
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 479
Estimated Gas Usage: 1114 - 1589
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x800001000029b4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 533
Estimated Gas Usage: 2917 - 38241
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x3f8000000eaeb9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 664
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8000000eaf79, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 680
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8000000eaf79, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 746
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8000000eaf79, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0



real	0m12.893s
user	0m12.168s
sys	0m0.598s
------------------------
Execution 5:
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 479
Estimated Gas Usage: 1114 - 1589
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000420ee9f4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 533
Estimated Gas Usage: 2917 - 38241
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8000000eaef9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 664
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8000000e8eb9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000000008, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 680
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8000000e8eb9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000000008, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 746
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8000000e8eb9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000000008, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0



real	0m12.705s
user	0m11.884s
sys	0m0.642s
------------------------
Execution 6:
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 479
Estimated Gas Usage: 1114 - 1589
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x420ee9f4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 533
Estimated Gas Usage: 2917 - 38241
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0xdf8801000eaef9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 664
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x11f8001000f8ff9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 680
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x11f8001000f8ff9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 746
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x11f8001000f8ff9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0



real	0m13.079s
user	0m12.266s
sys	0m0.648s
------------------------
Execution 7:
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 479
Estimated Gas Usage: 1114 - 1589
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x204000014207f9f4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 533
Estimated Gas Usage: 2917 - 38241
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x19f8801000f2ef9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 664
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8800000faedd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 680
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8800000faedd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 746
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8800000faedd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0



real	0m13.318s
user	0m12.552s
sys	0m0.623s
------------------------
Execution 8:
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 479
Estimated Gas Usage: 1114 - 1589
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000420ee9f4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 533
Estimated Gas Usage: 2917 - 38241
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8001000eaefd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 664
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8001000e2ef9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 680
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8001000e2ef9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 746
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8001000e2ef9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0



real	0m12.731s
user	0m11.962s
sys	0m0.603s
------------------------
Execution 9:
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 479
Estimated Gas Usage: 1114 - 1589
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0xc00000000008b4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 533
Estimated Gas Usage: 2917 - 38241
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x9f8801000caef9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 664
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x11f8000000faef9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 680
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x11f8000000faef9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 746
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x11f8000000faef9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0



real	0m12.826s
user	0m11.977s
sys	0m0.645s
------------------------
Execution 10:
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 479
Estimated Gas Usage: 1114 - 1589
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000420ee9f4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 533
Estimated Gas Usage: 2917 - 38241
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8000000eaf79, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 664
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8001000eaffd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 680
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8001000eaffd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Storage or transient storage access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: withdrawFunds(uint256)
PC address: 746
Estimated Gas Usage: 2917 - 38241
Write to persistent state following external call
The contract account storage or transient storage is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the storage / transient storage only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x219f8001000eaffd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0



real	0m12.681s
user	0m11.744s
sys	0m0.751s
------------------------
Mean real time: 12.8863 seconds
Mean user time: 12.0656 seconds
Mean sys time: 0.6485 seconds
Variance of real time: 0.0604962
Variance of user time: 0.0688163
Variance of sys time: 0.00220406
