// ================== STORAGE BYTECODE ==================

$ ./myth analyze -c "608060405234801561000f575f80fd5b506103818061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610086575f3560e01c8063a08299f111610059578063a08299f1146100fa578063b34c361014610116578063b630d70614610120578063f44f13d81461013c57610086565b806301d4277c1461008a578063546455b5146100a657806378375f14146100c257806392dd38ea146100de575b5f80fd5b6100a4600480360381019061009f9190610243565b610146565b005b6100c060048036038101906100bb9190610243565b61016c565b005b6100dc60048036038101906100d79190610243565b610180565b005b6100f860048036038101906100f39190610243565b61018f565b005b610114600480360381019061010f9190610243565b6101ab565b005b61011e6101bf565b005b61013a60048036038101906101359190610243565b6101d7565b005b6101446101f4565b005b6008811015610169575f8082600881106101635761016261026e565b5b01549050505b50565b6017810361017d5761017c61029b565b5b50565b6017810361018c575f80fd5b50565b5f8082600881106101a3576101a261026e565b5b015490505050565b5f8160016101b991906102f5565b90505050565b5f600190505f81146101d4576101d361029b565b5b50565b5f8111156101f1575f8160016101ed91906102f5565b9050505b50565b5f600190505f81116102095761020861029b565b5b50565b5f80fd5b5f819050919050565b61022281610210565b811461022c575f80fd5b50565b5f8135905061023d81610219565b92915050565b5f602082840312156102585761025761020c565b5b5f6102658482850161022f565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6102ff82610210565b915061030a83610210565b92508261031a576103196102c8565b5b82820490509291505056fea2646970667358221220059cbe3cfa1bb3e554d99be98d76d07734743814fa7c5d424b3cb776faff06d164736f6c637828302e382e32342d646576656c6f702e323032342e312e32362b636f6d6d69742e65313162396564390059" -t 1
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MAIN
Function name: assert3(uint256)
PC address: 368
Estimated Gas Usage: 447 - 542
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: assert3(uint256), txdata: 0x546455b50000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MAIN
Function name: requireisfine(uint256)
PC address: 388
Estimated Gas Usage: 469 - 564
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: requireisfine(uint256), txdata: 0x78375f140000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MAIN
Function name: assert1()
PC address: 711
Estimated Gas Usage: 224 - 509
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: assert1(), txdata: 0xb34c3610, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MAIN
Function name: assert3(uint256)
PC address: 711
Estimated Gas Usage: 472 - 757
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
Initial State:

Account: [CREATOR], balance: 0x421c104000001bfd9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: assert3(uint256), txdata: 0x546455b50000000000000000000000000000000000000000000000000000000000000017, decoded_data: (23,), value: 0x0


// ================== TRANSIENT STORAGE BYTECODE ==================

$ ./myth analyze -c "608060405234801561000f575f80fd5b506103818061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610086575f3560e01c8063a08299f111610059578063a08299f1146100fa578063b34c361014610116578063b630d70614610120578063f44f13d81461013c57610086565b806301d4277c1461008a5780635c645db5146100a657806378375f14146100c257806392dd38ea146100de575b5f80fd5b6100a4600480360381019061009f9190610243565b610146565b005b6100c060048036038101906100bb9190610243565b61016c565b005b6100dc60048036038101906100d79190610243565b610180565b005b6100f860048036038101906100f39190610243565b61018f565b005b610114600480360381019061010f9190610243565b6101ab565b005b61011e6101bf565b005b61013a60048036038101906101359190610243565b6101d7565b005b6101446101f4565b005b6008811015610169575f8082600881106101635761016261026e565b5b015c9050505b50565b6017810361017d5761017c61029b565b5b50565b6017810361018c575f80fd5b50565b5f8082600881106101a3576101a261026e565b5b015c90505050565b5f8160016101b991906102f5565b90505050565b5f600190505f81146101d4576101d361029b565b5b50565b5f8111156101f1575f8160016101ed91906102f5565b9050505b50565b5f600190505f81116102095761020861029b565b5b50565b5f80fd5b5f819050919050565b61022281610210565b811461022c575f80fd5b50565b5f8135905061023d81610219565b92915050565b5f602082840312156102585761025761020c565b5b5f6102658482850161022f565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6102ff82610210565b915061030a83610210565b92508261031a576103196102c8565b5b82820490509291505056fea2646970667358221220059cbe3cfa1bb3e55cd99be98d76d07734743814fa7c5d424b3cb776faff06d164736f6c637828302e382e32342d646576656c6f702e323032342e312e32362b636f6d6d69742e65313162396564390059" -t 1
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MAIN
Function name: _function_0x5c645db5
PC address: 368
Estimated Gas Usage: 447 - 542
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x5c645db50000000000000000000000000000000000000000000000000000000000000000, decoded_data: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MAIN
Function name: requireisfine(uint256)
PC address: 388
Estimated Gas Usage: 469 - 564
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: requireisfine(uint256), txdata: 0x78375f140000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MAIN
Function name: assert1()
PC address: 711
Estimated Gas Usage: 224 - 509
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: assert1(), txdata: 0xb34c3610, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MAIN
Function name: _function_0x5c645db5
PC address: 711
Estimated Gas Usage: 472 - 757
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x5c645db50000000000000000000000000000000000000000000000000000000000000017, decoded_data: , value: 0x0
